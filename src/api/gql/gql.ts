/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  fragment MerchantFragment on Merchant {\n    id\n\n    publicId\n    publicIdUpdatedAt\n\n    name\n    industry\n    websiteUrl\n\n    entityType\n\n    email\n    phone\n    status\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n\n    timezone\n    locale\n\n    archivedAt\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantFragmentFragmentDoc,
    "\n  query MerchantApi {\n    merchantApi {\n      ...MerchantFragment\n    }\n  }\n": typeof types.MerchantApiDocument,
    "\n  fragment MerchantCustomerPaymentMethodFragment on MerchantCustomerPaymentMethod {\n    id\n    isDefault\n    isEnabled\n    merchantInternalCustomerCode\n    methodType\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    paymentMethodInfo {\n      ... on MerchantCustomerPaymentMethodCreditCardInfo {\n        methodType\n        cardBrand\n        cardNumberMasked\n      }\n      ... on MerchantCustomerPaymentMethodGenericInfo {\n        methodType\n      }\n      ... on MerchantCustomerPaymentMethodAchInfo {\n        methodType\n        accountNumber\n        routingNumber\n        secCode\n      }\n    }\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantCustomerPaymentMethodFragmentFragmentDoc,
    "\n  query MerchantApiCustomerPaymentMethods(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $providerCode: String,\n    $methodType: PAYMENT_METHOD,\n\n    $merchantInternalCustomerCode: String,\n\n    $isDefault: Boolean,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiCustomerPaymentMethods(\n      id: $id,\n\n      transactionProvider: $transactionProvider,\n      transactionProviderId: $transactionProviderId,\n\n      providerCode: $providerCode,\n      methodType: $methodType,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n\n      isDefault: $isDefault,\n      hasProviderError: $hasProviderError,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantCustomerPaymentMethodFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.MerchantApiCustomerPaymentMethodsDocument,
    "\n  query MerchantApiCustomerPaymentMethod($merchantCustomerPaymentMethodId: String!) {\n    merchantApiCustomerPaymentMethod(merchantCustomerPaymentMethodId: $merchantCustomerPaymentMethodId) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n": typeof types.MerchantApiCustomerPaymentMethodDocument,
    "\n  fragment MerchantPaymentPlanTemplateFragment on MerchantPaymentPlanTemplate {\n    id\n    name\n    description\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantPaymentPlanTemplateFragmentFragmentDoc,
    "\n  query MerchantApiPaymentPlanTemplates(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $name: String,\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_TEMPLATE_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n  merchantApiPaymentPlanTemplates(\n    id: $id,\n\n    transactionProvider: $transactionProvider,\n    transactionProviderId: $transactionProviderId,\n\n    name: $name,\n    currency: $currency,\n    providerCode: $providerCode,\n    providerStatus: $providerStatus,\n\n    skip: $skip,\n    take: $take,\n\n    after: $after,\n    first: $first,\n\n    before: $before,\n    last: $last,\n\n    sorting: $sorting\n  ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanTemplateFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.MerchantApiPaymentPlanTemplatesDocument,
    "\n  query MerchantApiPaymentPlanTemplate($merchantPaymentPlanTemplateId: String!) {\n    merchantApiPaymentPlanTemplate(merchantPaymentPlanTemplateId: $merchantPaymentPlanTemplateId) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": typeof types.MerchantApiPaymentPlanTemplateDocument,
    "\n  mutation MerchantApiPaymentPlanTemplateCreate($data: MerchantPaymentPlanTemplateCreateSchema!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanTemplateCreate(data: $data, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": typeof types.MerchantApiPaymentPlanTemplateCreateDocument,
    "\n  mutation MerchantApiPaymentPlanTemplateUpdate(\n      $data: MerchantPaymentPlanTemplateUpdateSchema!,\n      $merchantTransactionProviderId: String!,\n      $merchantPaymentPlanTemplateId: String!\n  ) {\n    merchantApiPaymentPlanTemplateUpdate(\n      data: $data,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      merchantPaymentPlanTemplateId: $merchantPaymentPlanTemplateId\n    ) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": typeof types.MerchantApiPaymentPlanTemplateUpdateDocument,
    "\n  fragment MerchantPaymentPlanFragment on MerchantPaymentPlan {\n    id\n    merchantInternalPaymentPlanCode\n    merchantInternalPaymentPlanDescription\n    merchantInternalCustomerCode\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    status\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    periodCount\n    timeAnchor\n    currentPeriodStart\n    currentPeriodEnd\n    startedAt\n    endsAt\n    trialEndsAt\n    canceledAt\n\n    paymentMethodId\n    paymentMethod {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n\n    templateId\n    template {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantPaymentPlanFragmentFragmentDoc,
    "\n  query MerchantApiPaymentPlans(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_STATUS,\n\n    $paymentMethodId: String,\n    $paymentMethod: PAYMENT_METHOD,\n\n    $templateId: String,\n\n    $merchantInternalCustomerCode: String,\n    $merchantInternalPaymentPlanCode: String,\n\n    $hasProviderError: Boolean,\n\n    $ended: Boolean,\n    $started: Boolean,\n    $canceled: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiPaymentPlans(\n      id: $id,\n\n      transactionProvider: $transactionProvider,\n      transactionProviderId: $transactionProviderId,\n\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      currency: $currency,\n\n      paymentMethodId: $paymentMethodId,\n      paymentMethod: $paymentMethod,\n\n      templateId: $templateId,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalPaymentPlanCode: $merchantInternalPaymentPlanCode,\n\n      hasProviderError: $hasProviderError,\n\n      ended: $ended,\n      started: $started,\n      canceled: $canceled,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.MerchantApiPaymentPlansDocument,
    "\n  query MerchantApiPaymentPlan($merchantPaymentPlanId: String!) {\n    merchantApiPaymentPlan(merchantPaymentPlanId: $merchantPaymentPlanId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": typeof types.MerchantApiPaymentPlanDocument,
    "\n  mutation MerchantApiPaymentPlanCreate($data: MerchantPaymentPlanCreateSchema!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanCreate(data: $data, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": typeof types.MerchantApiPaymentPlanCreateDocument,
    "\n  mutation MerchantApiPaymentPlanCancel($merchantPaymentPlanId: String!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanCancel(merchantPaymentPlanId: $merchantPaymentPlanId, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": typeof types.MerchantApiPaymentPlanCancelDocument,
    "\n  fragment MerchantTransactionProviderFragment on MerchantTransactionProvider {\n    id\n    merchantId\n    provider\n    providerCode\n    status\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantTransactionProviderFragmentFragmentDoc,
    "\n  query MerchantApiTransactionProviders(\n    $id: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $status: MERCHANT_TRANSACTION_PROVIDER_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiTransactionProviders(\n      id: $id,\n      provider: $transactionProvider,\n      status: $status,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.MerchantApiTransactionProvidersDocument,
    "\n  query MerchantApiTransactionProvider($merchantTransactionProviderId: String!) {\n    merchantApiTransactionProvider(merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n": typeof types.MerchantApiTransactionProviderDocument,
    "\n  fragment MerchantTransactionBaseFragment on MerchantTransaction {\n    id\n    code\n    token\n    tokenExpiresAt\n    action\n    status\n    providerStatus\n    providerCode\n    providerRelatedCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n\n    amount\n    refundedAmount\n    currency\n\n    merchantInternalCustomerCode\n    merchantInternalTransactionCode\n\n    transactionDate\n    startedAt\n    succeededAt\n    failedAt\n    canceledAt\n    disputedAt\n    refundedAt\n    voidedAt\n\n    transactionError\n\n    storePaymentMethod\n\n    deviceId\n    deviceIp\n    deviceBrowser\n    deviceOS\n    deviceName\n    deviceType\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    shippingFirstName\n    shippingLastName\n    shippingEmail\n    shippingPhone\n    shippingAddressLine1\n    shippingAddressLine2\n    shippingAddressCity\n    shippingAddressState\n    shippingAddressCountry\n    shippingAddressPostalCode\n\n    userFirstName\n    userLastName\n    userEmail\n    userPhone\n    userBirthDate\n    userLocale\n    userLegalIdentifier\n    userLegalIdentifierType\n    userAddressLine1\n    userAddressLine2\n    userAddressCity\n    userAddressState\n    userAddressCountry\n    userAddressPostalCode\n\n    paymentMethodId\n    paymentMethodCode\n    paymentMethodType\n    \n    paymentPlanId\n\n    relatedTransactionId\n    \n    transactionProviderId\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": typeof types.MerchantTransactionBaseFragmentFragmentDoc,
    "\n  fragment MerchantTransactionFragment on MerchantTransaction {\n    ...MerchantTransactionBaseFragment\n\n    paymentMethod {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n\n    relatedTransaction {\n      ...MerchantTransactionBaseFragment\n    }\n\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n": typeof types.MerchantTransactionFragmentFragmentDoc,
    "\n  query MerchantApiTransactions(\n    $id: String,\n    $code: String,\n    $paymentMethodId: String,\n    $transactionProviderId: String,\n\n    $status: TRANSACTION_STATUS,\n    $currency: CURRENCY,\n    $paymentMethodType: PAYMENT_METHOD,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $providerCode: String,\n    $hasProviderError: Boolean,\n\n    $merchantInternalCustomerCode: String,\n    $merchantInternalTransactionCode: String,\n\n    $token: String,\n\n    $failed: Boolean,\n    $started: Boolean,\n    $disputed: Boolean,\n    $reverted: Boolean,\n    $canceled: Boolean,\n    $succeeded: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiTransactions(\n      id: $id,\n      code: $code,\n      paymentMethodId: $paymentMethodId,\n      transactionProviderId: $transactionProviderId,\n\n      status: $status,\n      currency: $currency,\n      paymentMethodType: $paymentMethodType,\n      transactionProvider: $transactionProvider,\n\n      providerCode: $providerCode,\n      hasProviderError: $hasProviderError,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n\n      token: $token,\n\n      failed: $failed,\n      started: $started,\n      disputed: $disputed,\n      reverted: $reverted,\n      canceled: $canceled,\n      succeeded: $succeeded,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.MerchantApiTransactionsDocument,
    "\n  query MerchantApiTransaction(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiTransaction(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": typeof types.MerchantApiTransactionDocument,
    "\n  query MerchantApiClientTransactionNuveiPreSessionData($transactionProvider: TRANSACTION_PROVIDER, $merchantTransactionProviderId: String) {\n    merchantApiClientGetPreSessionData(transactionProvider: $transactionProvider, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ... on MerchantClientTransactionNuveiPreSessionData {\n        provider\n        merchantId\n        merchantSiteId\n        environment\n      }\n      ... on MerchantClientTransactionGenericPreSessionData {\n        provider\n        publicKey\n      }\n    }\n  }\n": typeof types.MerchantApiClientTransactionNuveiPreSessionDataDocument,
    "\n  mutation MerchantApiClientTransactionPaymentSessionStart(\n    $merchantTransactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $data: MerchantApiClientTransactionPaymentStartSchema!\n  ) {\n    merchantApiClientTransactionPaymentSessionStart(\n      transactionProvider: $transactionProvider,\n      merchantTransactionProviderId: $merchantTransactionProviderId\n\n      data: $data,\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": typeof types.MerchantApiClientTransactionPaymentSessionStartDocument,
    "\n  mutation MerchantApiClientTransactionPaymentSessionVerify(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiClientTransactionPaymentSessionVerify(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": typeof types.MerchantApiClientTransactionPaymentSessionVerifyDocument,
    "\n  mutation MerchantApiTransactionVoid(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiTransactionVoid(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": typeof types.MerchantApiTransactionVoidDocument,
    "\n  mutation MerchantApiTransactionRefund(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String,\n    $amount: BigInt!\n  ) {\n    merchantApiTransactionRefund(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      amount: $amount\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": typeof types.MerchantApiTransactionRefundDocument,
};
const documents: Documents = {
    "\n  fragment MerchantFragment on Merchant {\n    id\n\n    publicId\n    publicIdUpdatedAt\n\n    name\n    industry\n    websiteUrl\n\n    entityType\n\n    email\n    phone\n    status\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n\n    timezone\n    locale\n\n    archivedAt\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantFragmentFragmentDoc,
    "\n  query MerchantApi {\n    merchantApi {\n      ...MerchantFragment\n    }\n  }\n": types.MerchantApiDocument,
    "\n  fragment MerchantCustomerPaymentMethodFragment on MerchantCustomerPaymentMethod {\n    id\n    isDefault\n    isEnabled\n    merchantInternalCustomerCode\n    methodType\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    paymentMethodInfo {\n      ... on MerchantCustomerPaymentMethodCreditCardInfo {\n        methodType\n        cardBrand\n        cardNumberMasked\n      }\n      ... on MerchantCustomerPaymentMethodGenericInfo {\n        methodType\n      }\n      ... on MerchantCustomerPaymentMethodAchInfo {\n        methodType\n        accountNumber\n        routingNumber\n        secCode\n      }\n    }\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantCustomerPaymentMethodFragmentFragmentDoc,
    "\n  query MerchantApiCustomerPaymentMethods(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $providerCode: String,\n    $methodType: PAYMENT_METHOD,\n\n    $merchantInternalCustomerCode: String,\n\n    $isDefault: Boolean,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiCustomerPaymentMethods(\n      id: $id,\n\n      transactionProvider: $transactionProvider,\n      transactionProviderId: $transactionProviderId,\n\n      providerCode: $providerCode,\n      methodType: $methodType,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n\n      isDefault: $isDefault,\n      hasProviderError: $hasProviderError,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantCustomerPaymentMethodFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.MerchantApiCustomerPaymentMethodsDocument,
    "\n  query MerchantApiCustomerPaymentMethod($merchantCustomerPaymentMethodId: String!) {\n    merchantApiCustomerPaymentMethod(merchantCustomerPaymentMethodId: $merchantCustomerPaymentMethodId) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n": types.MerchantApiCustomerPaymentMethodDocument,
    "\n  fragment MerchantPaymentPlanTemplateFragment on MerchantPaymentPlanTemplate {\n    id\n    name\n    description\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantPaymentPlanTemplateFragmentFragmentDoc,
    "\n  query MerchantApiPaymentPlanTemplates(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $name: String,\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_TEMPLATE_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n  merchantApiPaymentPlanTemplates(\n    id: $id,\n\n    transactionProvider: $transactionProvider,\n    transactionProviderId: $transactionProviderId,\n\n    name: $name,\n    currency: $currency,\n    providerCode: $providerCode,\n    providerStatus: $providerStatus,\n\n    skip: $skip,\n    take: $take,\n\n    after: $after,\n    first: $first,\n\n    before: $before,\n    last: $last,\n\n    sorting: $sorting\n  ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanTemplateFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.MerchantApiPaymentPlanTemplatesDocument,
    "\n  query MerchantApiPaymentPlanTemplate($merchantPaymentPlanTemplateId: String!) {\n    merchantApiPaymentPlanTemplate(merchantPaymentPlanTemplateId: $merchantPaymentPlanTemplateId) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": types.MerchantApiPaymentPlanTemplateDocument,
    "\n  mutation MerchantApiPaymentPlanTemplateCreate($data: MerchantPaymentPlanTemplateCreateSchema!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanTemplateCreate(data: $data, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": types.MerchantApiPaymentPlanTemplateCreateDocument,
    "\n  mutation MerchantApiPaymentPlanTemplateUpdate(\n      $data: MerchantPaymentPlanTemplateUpdateSchema!,\n      $merchantTransactionProviderId: String!,\n      $merchantPaymentPlanTemplateId: String!\n  ) {\n    merchantApiPaymentPlanTemplateUpdate(\n      data: $data,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      merchantPaymentPlanTemplateId: $merchantPaymentPlanTemplateId\n    ) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n": types.MerchantApiPaymentPlanTemplateUpdateDocument,
    "\n  fragment MerchantPaymentPlanFragment on MerchantPaymentPlan {\n    id\n    merchantInternalPaymentPlanCode\n    merchantInternalPaymentPlanDescription\n    merchantInternalCustomerCode\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    status\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    periodCount\n    timeAnchor\n    currentPeriodStart\n    currentPeriodEnd\n    startedAt\n    endsAt\n    trialEndsAt\n    canceledAt\n\n    paymentMethodId\n    paymentMethod {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n\n    templateId\n    template {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantPaymentPlanFragmentFragmentDoc,
    "\n  query MerchantApiPaymentPlans(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_STATUS,\n\n    $paymentMethodId: String,\n    $paymentMethod: PAYMENT_METHOD,\n\n    $templateId: String,\n\n    $merchantInternalCustomerCode: String,\n    $merchantInternalPaymentPlanCode: String,\n\n    $hasProviderError: Boolean,\n\n    $ended: Boolean,\n    $started: Boolean,\n    $canceled: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiPaymentPlans(\n      id: $id,\n\n      transactionProvider: $transactionProvider,\n      transactionProviderId: $transactionProviderId,\n\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      currency: $currency,\n\n      paymentMethodId: $paymentMethodId,\n      paymentMethod: $paymentMethod,\n\n      templateId: $templateId,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalPaymentPlanCode: $merchantInternalPaymentPlanCode,\n\n      hasProviderError: $hasProviderError,\n\n      ended: $ended,\n      started: $started,\n      canceled: $canceled,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.MerchantApiPaymentPlansDocument,
    "\n  query MerchantApiPaymentPlan($merchantPaymentPlanId: String!) {\n    merchantApiPaymentPlan(merchantPaymentPlanId: $merchantPaymentPlanId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": types.MerchantApiPaymentPlanDocument,
    "\n  mutation MerchantApiPaymentPlanCreate($data: MerchantPaymentPlanCreateSchema!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanCreate(data: $data, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": types.MerchantApiPaymentPlanCreateDocument,
    "\n  mutation MerchantApiPaymentPlanCancel($merchantPaymentPlanId: String!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanCancel(merchantPaymentPlanId: $merchantPaymentPlanId, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n": types.MerchantApiPaymentPlanCancelDocument,
    "\n  fragment MerchantTransactionProviderFragment on MerchantTransactionProvider {\n    id\n    merchantId\n    provider\n    providerCode\n    status\n    createdAt\n    updatedAt\n  }\n": types.MerchantTransactionProviderFragmentFragmentDoc,
    "\n  query MerchantApiTransactionProviders(\n    $id: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $status: MERCHANT_TRANSACTION_PROVIDER_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiTransactionProviders(\n      id: $id,\n      provider: $transactionProvider,\n      status: $status,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.MerchantApiTransactionProvidersDocument,
    "\n  query MerchantApiTransactionProvider($merchantTransactionProviderId: String!) {\n    merchantApiTransactionProvider(merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n": types.MerchantApiTransactionProviderDocument,
    "\n  fragment MerchantTransactionBaseFragment on MerchantTransaction {\n    id\n    code\n    token\n    tokenExpiresAt\n    action\n    status\n    providerStatus\n    providerCode\n    providerRelatedCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n\n    amount\n    refundedAmount\n    currency\n\n    merchantInternalCustomerCode\n    merchantInternalTransactionCode\n\n    transactionDate\n    startedAt\n    succeededAt\n    failedAt\n    canceledAt\n    disputedAt\n    refundedAt\n    voidedAt\n\n    transactionError\n\n    storePaymentMethod\n\n    deviceId\n    deviceIp\n    deviceBrowser\n    deviceOS\n    deviceName\n    deviceType\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    shippingFirstName\n    shippingLastName\n    shippingEmail\n    shippingPhone\n    shippingAddressLine1\n    shippingAddressLine2\n    shippingAddressCity\n    shippingAddressState\n    shippingAddressCountry\n    shippingAddressPostalCode\n\n    userFirstName\n    userLastName\n    userEmail\n    userPhone\n    userBirthDate\n    userLocale\n    userLegalIdentifier\n    userLegalIdentifierType\n    userAddressLine1\n    userAddressLine2\n    userAddressCity\n    userAddressState\n    userAddressCountry\n    userAddressPostalCode\n\n    paymentMethodId\n    paymentMethodCode\n    paymentMethodType\n    \n    paymentPlanId\n\n    relatedTransactionId\n    \n    transactionProviderId\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n": types.MerchantTransactionBaseFragmentFragmentDoc,
    "\n  fragment MerchantTransactionFragment on MerchantTransaction {\n    ...MerchantTransactionBaseFragment\n\n    paymentMethod {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n\n    relatedTransaction {\n      ...MerchantTransactionBaseFragment\n    }\n\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n": types.MerchantTransactionFragmentFragmentDoc,
    "\n  query MerchantApiTransactions(\n    $id: String,\n    $code: String,\n    $paymentMethodId: String,\n    $transactionProviderId: String,\n\n    $status: TRANSACTION_STATUS,\n    $currency: CURRENCY,\n    $paymentMethodType: PAYMENT_METHOD,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $providerCode: String,\n    $hasProviderError: Boolean,\n\n    $merchantInternalCustomerCode: String,\n    $merchantInternalTransactionCode: String,\n\n    $token: String,\n\n    $failed: Boolean,\n    $started: Boolean,\n    $disputed: Boolean,\n    $reverted: Boolean,\n    $canceled: Boolean,\n    $succeeded: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiTransactions(\n      id: $id,\n      code: $code,\n      paymentMethodId: $paymentMethodId,\n      transactionProviderId: $transactionProviderId,\n\n      status: $status,\n      currency: $currency,\n      paymentMethodType: $paymentMethodType,\n      transactionProvider: $transactionProvider,\n\n      providerCode: $providerCode,\n      hasProviderError: $hasProviderError,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n\n      token: $token,\n\n      failed: $failed,\n      started: $started,\n      disputed: $disputed,\n      reverted: $reverted,\n      canceled: $canceled,\n      succeeded: $succeeded,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.MerchantApiTransactionsDocument,
    "\n  query MerchantApiTransaction(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiTransaction(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": types.MerchantApiTransactionDocument,
    "\n  query MerchantApiClientTransactionNuveiPreSessionData($transactionProvider: TRANSACTION_PROVIDER, $merchantTransactionProviderId: String) {\n    merchantApiClientGetPreSessionData(transactionProvider: $transactionProvider, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ... on MerchantClientTransactionNuveiPreSessionData {\n        provider\n        merchantId\n        merchantSiteId\n        environment\n      }\n      ... on MerchantClientTransactionGenericPreSessionData {\n        provider\n        publicKey\n      }\n    }\n  }\n": types.MerchantApiClientTransactionNuveiPreSessionDataDocument,
    "\n  mutation MerchantApiClientTransactionPaymentSessionStart(\n    $merchantTransactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $data: MerchantApiClientTransactionPaymentStartSchema!\n  ) {\n    merchantApiClientTransactionPaymentSessionStart(\n      transactionProvider: $transactionProvider,\n      merchantTransactionProviderId: $merchantTransactionProviderId\n\n      data: $data,\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": types.MerchantApiClientTransactionPaymentSessionStartDocument,
    "\n  mutation MerchantApiClientTransactionPaymentSessionVerify(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiClientTransactionPaymentSessionVerify(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": types.MerchantApiClientTransactionPaymentSessionVerifyDocument,
    "\n  mutation MerchantApiTransactionVoid(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiTransactionVoid(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": types.MerchantApiTransactionVoidDocument,
    "\n  mutation MerchantApiTransactionRefund(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String,\n    $amount: BigInt!\n  ) {\n    merchantApiTransactionRefund(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      amount: $amount\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n": types.MerchantApiTransactionRefundDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantFragment on Merchant {\n    id\n\n    publicId\n    publicIdUpdatedAt\n\n    name\n    industry\n    websiteUrl\n\n    entityType\n\n    email\n    phone\n    status\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n\n    timezone\n    locale\n\n    archivedAt\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantFragment on Merchant {\n    id\n\n    publicId\n    publicIdUpdatedAt\n\n    name\n    industry\n    websiteUrl\n\n    entityType\n\n    email\n    phone\n    status\n\n    addressCountry\n    addressState\n    addressCity\n    addressLine1\n    addressLine2\n    addressPostalCode\n\n    legalAddressCountry\n    legalAddressState\n    legalAddressCity\n    legalAddressLine1\n    legalAddressLine2\n    legalAddressPostalCode\n\n    primaryContactName\n    primaryContactEmail\n    primaryContactPhone\n\n    timezone\n    locale\n\n    archivedAt\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApi {\n    merchantApi {\n      ...MerchantFragment\n    }\n  }\n"): (typeof documents)["\n  query MerchantApi {\n    merchantApi {\n      ...MerchantFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantCustomerPaymentMethodFragment on MerchantCustomerPaymentMethod {\n    id\n    isDefault\n    isEnabled\n    merchantInternalCustomerCode\n    methodType\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    paymentMethodInfo {\n      ... on MerchantCustomerPaymentMethodCreditCardInfo {\n        methodType\n        cardBrand\n        cardNumberMasked\n      }\n      ... on MerchantCustomerPaymentMethodGenericInfo {\n        methodType\n      }\n      ... on MerchantCustomerPaymentMethodAchInfo {\n        methodType\n        accountNumber\n        routingNumber\n        secCode\n      }\n    }\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantCustomerPaymentMethodFragment on MerchantCustomerPaymentMethod {\n    id\n    isDefault\n    isEnabled\n    merchantInternalCustomerCode\n    methodType\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    paymentMethodInfo {\n      ... on MerchantCustomerPaymentMethodCreditCardInfo {\n        methodType\n        cardBrand\n        cardNumberMasked\n      }\n      ... on MerchantCustomerPaymentMethodGenericInfo {\n        methodType\n      }\n      ... on MerchantCustomerPaymentMethodAchInfo {\n        methodType\n        accountNumber\n        routingNumber\n        secCode\n      }\n    }\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiCustomerPaymentMethods(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $providerCode: String,\n    $methodType: PAYMENT_METHOD,\n\n    $merchantInternalCustomerCode: String,\n\n    $isDefault: Boolean,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiCustomerPaymentMethods(\n      id: $id,\n\n      transactionProvider: $transactionProvider,\n      transactionProviderId: $transactionProviderId,\n\n      providerCode: $providerCode,\n      methodType: $methodType,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n\n      isDefault: $isDefault,\n      hasProviderError: $hasProviderError,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantCustomerPaymentMethodFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiCustomerPaymentMethods(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $providerCode: String,\n    $methodType: PAYMENT_METHOD,\n\n    $merchantInternalCustomerCode: String,\n\n    $isDefault: Boolean,\n    $hasProviderError: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiCustomerPaymentMethods(\n      id: $id,\n\n      transactionProvider: $transactionProvider,\n      transactionProviderId: $transactionProviderId,\n\n      providerCode: $providerCode,\n      methodType: $methodType,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n\n      isDefault: $isDefault,\n      hasProviderError: $hasProviderError,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantCustomerPaymentMethodFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiCustomerPaymentMethod($merchantCustomerPaymentMethodId: String!) {\n    merchantApiCustomerPaymentMethod(merchantCustomerPaymentMethodId: $merchantCustomerPaymentMethodId) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiCustomerPaymentMethod($merchantCustomerPaymentMethodId: String!) {\n    merchantApiCustomerPaymentMethod(merchantCustomerPaymentMethodId: $merchantCustomerPaymentMethodId) {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantPaymentPlanTemplateFragment on MerchantPaymentPlanTemplate {\n    id\n    name\n    description\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantPaymentPlanTemplateFragment on MerchantPaymentPlanTemplate {\n    id\n    name\n    description\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    transactionProviderId\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiPaymentPlanTemplates(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $name: String,\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_TEMPLATE_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n  merchantApiPaymentPlanTemplates(\n    id: $id,\n\n    transactionProvider: $transactionProvider,\n    transactionProviderId: $transactionProviderId,\n\n    name: $name,\n    currency: $currency,\n    providerCode: $providerCode,\n    providerStatus: $providerStatus,\n\n    skip: $skip,\n    take: $take,\n\n    after: $after,\n    first: $first,\n\n    before: $before,\n    last: $last,\n\n    sorting: $sorting\n  ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanTemplateFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiPaymentPlanTemplates(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $name: String,\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_TEMPLATE_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n  merchantApiPaymentPlanTemplates(\n    id: $id,\n\n    transactionProvider: $transactionProvider,\n    transactionProviderId: $transactionProviderId,\n\n    name: $name,\n    currency: $currency,\n    providerCode: $providerCode,\n    providerStatus: $providerStatus,\n\n    skip: $skip,\n    take: $take,\n\n    after: $after,\n    first: $first,\n\n    before: $before,\n    last: $last,\n\n    sorting: $sorting\n  ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanTemplateFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiPaymentPlanTemplate($merchantPaymentPlanTemplateId: String!) {\n    merchantApiPaymentPlanTemplate(merchantPaymentPlanTemplateId: $merchantPaymentPlanTemplateId) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiPaymentPlanTemplate($merchantPaymentPlanTemplateId: String!) {\n    merchantApiPaymentPlanTemplate(merchantPaymentPlanTemplateId: $merchantPaymentPlanTemplateId) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MerchantApiPaymentPlanTemplateCreate($data: MerchantPaymentPlanTemplateCreateSchema!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanTemplateCreate(data: $data, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"): (typeof documents)["\n  mutation MerchantApiPaymentPlanTemplateCreate($data: MerchantPaymentPlanTemplateCreateSchema!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanTemplateCreate(data: $data, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MerchantApiPaymentPlanTemplateUpdate(\n      $data: MerchantPaymentPlanTemplateUpdateSchema!,\n      $merchantTransactionProviderId: String!,\n      $merchantPaymentPlanTemplateId: String!\n  ) {\n    merchantApiPaymentPlanTemplateUpdate(\n      data: $data,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      merchantPaymentPlanTemplateId: $merchantPaymentPlanTemplateId\n    ) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"): (typeof documents)["\n  mutation MerchantApiPaymentPlanTemplateUpdate(\n      $data: MerchantPaymentPlanTemplateUpdateSchema!,\n      $merchantTransactionProviderId: String!,\n      $merchantPaymentPlanTemplateId: String!\n  ) {\n    merchantApiPaymentPlanTemplateUpdate(\n      data: $data,\n      merchantTransactionProviderId: $merchantTransactionProviderId,\n      merchantPaymentPlanTemplateId: $merchantPaymentPlanTemplateId\n    ) {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantPaymentPlanFragment on MerchantPaymentPlan {\n    id\n    merchantInternalPaymentPlanCode\n    merchantInternalPaymentPlanDescription\n    merchantInternalCustomerCode\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    status\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    periodCount\n    timeAnchor\n    currentPeriodStart\n    currentPeriodEnd\n    startedAt\n    endsAt\n    trialEndsAt\n    canceledAt\n\n    paymentMethodId\n    paymentMethod {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n\n    templateId\n    template {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantPaymentPlanFragment on MerchantPaymentPlan {\n    id\n    merchantInternalPaymentPlanCode\n    merchantInternalPaymentPlanDescription\n    merchantInternalCustomerCode\n    amount\n    initialAmount\n    currency\n    providerCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n    providerStatus\n    status\n\n    renewalIntervalDays\n    renewalIntervalMonths\n    renewalIntervalYears\n\n    endsAfterDays\n    endsAfterMonths\n    endsAfterYears\n\n    trialPeriodDays\n    trialPeriodMonths\n    trialPeriodYears\n\n    periodCount\n    timeAnchor\n    currentPeriodStart\n    currentPeriodEnd\n    startedAt\n    endsAt\n    trialEndsAt\n    canceledAt\n\n    paymentMethodId\n    paymentMethod {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n\n    templateId\n    template {\n      ...MerchantPaymentPlanTemplateFragment\n    }\n\n    transactionProviderId\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiPaymentPlans(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_STATUS,\n\n    $paymentMethodId: String,\n    $paymentMethod: PAYMENT_METHOD,\n\n    $templateId: String,\n\n    $merchantInternalCustomerCode: String,\n    $merchantInternalPaymentPlanCode: String,\n\n    $hasProviderError: Boolean,\n\n    $ended: Boolean,\n    $started: Boolean,\n    $canceled: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiPaymentPlans(\n      id: $id,\n\n      transactionProvider: $transactionProvider,\n      transactionProviderId: $transactionProviderId,\n\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      currency: $currency,\n\n      paymentMethodId: $paymentMethodId,\n      paymentMethod: $paymentMethod,\n\n      templateId: $templateId,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalPaymentPlanCode: $merchantInternalPaymentPlanCode,\n\n      hasProviderError: $hasProviderError,\n\n      ended: $ended,\n      started: $started,\n      canceled: $canceled,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiPaymentPlans(\n    $id: String,\n\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $transactionProviderId: String,\n\n    $currency: CURRENCY,\n    $providerCode: String,\n    $providerStatus: PAYMENT_PLAN_STATUS,\n\n    $paymentMethodId: String,\n    $paymentMethod: PAYMENT_METHOD,\n\n    $templateId: String,\n\n    $merchantInternalCustomerCode: String,\n    $merchantInternalPaymentPlanCode: String,\n\n    $hasProviderError: Boolean,\n\n    $ended: Boolean,\n    $started: Boolean,\n    $canceled: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiPaymentPlans(\n      id: $id,\n\n      transactionProvider: $transactionProvider,\n      transactionProviderId: $transactionProviderId,\n\n      providerCode: $providerCode,\n      providerStatus: $providerStatus,\n      currency: $currency,\n\n      paymentMethodId: $paymentMethodId,\n      paymentMethod: $paymentMethod,\n\n      templateId: $templateId,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalPaymentPlanCode: $merchantInternalPaymentPlanCode,\n\n      hasProviderError: $hasProviderError,\n\n      ended: $ended,\n      started: $started,\n      canceled: $canceled,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantPaymentPlanFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiPaymentPlan($merchantPaymentPlanId: String!) {\n    merchantApiPaymentPlan(merchantPaymentPlanId: $merchantPaymentPlanId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiPaymentPlan($merchantPaymentPlanId: String!) {\n    merchantApiPaymentPlan(merchantPaymentPlanId: $merchantPaymentPlanId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MerchantApiPaymentPlanCreate($data: MerchantPaymentPlanCreateSchema!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanCreate(data: $data, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"): (typeof documents)["\n  mutation MerchantApiPaymentPlanCreate($data: MerchantPaymentPlanCreateSchema!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanCreate(data: $data, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MerchantApiPaymentPlanCancel($merchantPaymentPlanId: String!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanCancel(merchantPaymentPlanId: $merchantPaymentPlanId, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"): (typeof documents)["\n  mutation MerchantApiPaymentPlanCancel($merchantPaymentPlanId: String!, $merchantTransactionProviderId: String!) {\n    merchantApiPaymentPlanCancel(merchantPaymentPlanId: $merchantPaymentPlanId, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantPaymentPlanFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantTransactionProviderFragment on MerchantTransactionProvider {\n    id\n    merchantId\n    provider\n    providerCode\n    status\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantTransactionProviderFragment on MerchantTransactionProvider {\n    id\n    merchantId\n    provider\n    providerCode\n    status\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiTransactionProviders(\n    $id: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $status: MERCHANT_TRANSACTION_PROVIDER_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiTransactionProviders(\n      id: $id,\n      provider: $transactionProvider,\n      status: $status,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiTransactionProviders(\n    $id: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n    $status: MERCHANT_TRANSACTION_PROVIDER_STATUS,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiTransactionProviders(\n      id: $id,\n      provider: $transactionProvider,\n      status: $status,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionProviderFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiTransactionProvider($merchantTransactionProviderId: String!) {\n    merchantApiTransactionProvider(merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiTransactionProvider($merchantTransactionProviderId: String!) {\n    merchantApiTransactionProvider(merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantTransactionBaseFragment on MerchantTransaction {\n    id\n    code\n    token\n    tokenExpiresAt\n    action\n    status\n    providerStatus\n    providerCode\n    providerRelatedCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n\n    amount\n    refundedAmount\n    currency\n\n    merchantInternalCustomerCode\n    merchantInternalTransactionCode\n\n    transactionDate\n    startedAt\n    succeededAt\n    failedAt\n    canceledAt\n    disputedAt\n    refundedAt\n    voidedAt\n\n    transactionError\n\n    storePaymentMethod\n\n    deviceId\n    deviceIp\n    deviceBrowser\n    deviceOS\n    deviceName\n    deviceType\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    shippingFirstName\n    shippingLastName\n    shippingEmail\n    shippingPhone\n    shippingAddressLine1\n    shippingAddressLine2\n    shippingAddressCity\n    shippingAddressState\n    shippingAddressCountry\n    shippingAddressPostalCode\n\n    userFirstName\n    userLastName\n    userEmail\n    userPhone\n    userBirthDate\n    userLocale\n    userLegalIdentifier\n    userLegalIdentifierType\n    userAddressLine1\n    userAddressLine2\n    userAddressCity\n    userAddressState\n    userAddressCountry\n    userAddressPostalCode\n\n    paymentMethodId\n    paymentMethodCode\n    paymentMethodType\n    \n    paymentPlanId\n\n    relatedTransactionId\n    \n    transactionProviderId\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment MerchantTransactionBaseFragment on MerchantTransaction {\n    id\n    code\n    token\n    tokenExpiresAt\n    action\n    status\n    providerStatus\n    providerCode\n    providerRelatedCode\n    providerError\n    providerLastSyncedAt\n    providerLastVerifiedAt\n\n    amount\n    refundedAmount\n    currency\n\n    merchantInternalCustomerCode\n    merchantInternalTransactionCode\n\n    transactionDate\n    startedAt\n    succeededAt\n    failedAt\n    canceledAt\n    disputedAt\n    refundedAt\n    voidedAt\n\n    transactionError\n\n    storePaymentMethod\n\n    deviceId\n    deviceIp\n    deviceBrowser\n    deviceOS\n    deviceName\n    deviceType\n\n    billingFirstName\n    billingLastName\n    billingEmail\n    billingPhone\n    billingAddressLine1\n    billingAddressLine2\n    billingAddressCity\n    billingAddressState\n    billingAddressCountry\n    billingAddressPostalCode\n\n    shippingFirstName\n    shippingLastName\n    shippingEmail\n    shippingPhone\n    shippingAddressLine1\n    shippingAddressLine2\n    shippingAddressCity\n    shippingAddressState\n    shippingAddressCountry\n    shippingAddressPostalCode\n\n    userFirstName\n    userLastName\n    userEmail\n    userPhone\n    userBirthDate\n    userLocale\n    userLegalIdentifier\n    userLegalIdentifierType\n    userAddressLine1\n    userAddressLine2\n    userAddressCity\n    userAddressState\n    userAddressCountry\n    userAddressPostalCode\n\n    paymentMethodId\n    paymentMethodCode\n    paymentMethodType\n    \n    paymentPlanId\n\n    relatedTransactionId\n    \n    transactionProviderId\n\n    payload\n\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MerchantTransactionFragment on MerchantTransaction {\n    ...MerchantTransactionBaseFragment\n\n    paymentMethod {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n\n    relatedTransaction {\n      ...MerchantTransactionBaseFragment\n    }\n\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n"): (typeof documents)["\n  fragment MerchantTransactionFragment on MerchantTransaction {\n    ...MerchantTransactionBaseFragment\n\n    paymentMethod {\n      ...MerchantCustomerPaymentMethodFragment\n    }\n\n    relatedTransaction {\n      ...MerchantTransactionBaseFragment\n    }\n\n    transactionProvider {\n      ...MerchantTransactionProviderFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiTransactions(\n    $id: String,\n    $code: String,\n    $paymentMethodId: String,\n    $transactionProviderId: String,\n\n    $status: TRANSACTION_STATUS,\n    $currency: CURRENCY,\n    $paymentMethodType: PAYMENT_METHOD,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $providerCode: String,\n    $hasProviderError: Boolean,\n\n    $merchantInternalCustomerCode: String,\n    $merchantInternalTransactionCode: String,\n\n    $token: String,\n\n    $failed: Boolean,\n    $started: Boolean,\n    $disputed: Boolean,\n    $reverted: Boolean,\n    $canceled: Boolean,\n    $succeeded: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiTransactions(\n      id: $id,\n      code: $code,\n      paymentMethodId: $paymentMethodId,\n      transactionProviderId: $transactionProviderId,\n\n      status: $status,\n      currency: $currency,\n      paymentMethodType: $paymentMethodType,\n      transactionProvider: $transactionProvider,\n\n      providerCode: $providerCode,\n      hasProviderError: $hasProviderError,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n\n      token: $token,\n\n      failed: $failed,\n      started: $started,\n      disputed: $disputed,\n      reverted: $reverted,\n      canceled: $canceled,\n      succeeded: $succeeded,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiTransactions(\n    $id: String,\n    $code: String,\n    $paymentMethodId: String,\n    $transactionProviderId: String,\n\n    $status: TRANSACTION_STATUS,\n    $currency: CURRENCY,\n    $paymentMethodType: PAYMENT_METHOD,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $providerCode: String,\n    $hasProviderError: Boolean,\n\n    $merchantInternalCustomerCode: String,\n    $merchantInternalTransactionCode: String,\n\n    $token: String,\n\n    $failed: Boolean,\n    $started: Boolean,\n    $disputed: Boolean,\n    $reverted: Boolean,\n    $canceled: Boolean,\n    $succeeded: Boolean,\n\n    $skip: Int,\n    $take: Int,\n\n    $after: ConnectionCursor,\n    $first: Int,\n\n    $before: ConnectionCursor,\n    $last: Int,\n\n    $sorting: [SortingFieldSchema!]\n  ) {\n    merchantApiTransactions(\n      id: $id,\n      code: $code,\n      paymentMethodId: $paymentMethodId,\n      transactionProviderId: $transactionProviderId,\n\n      status: $status,\n      currency: $currency,\n      paymentMethodType: $paymentMethodType,\n      transactionProvider: $transactionProvider,\n\n      providerCode: $providerCode,\n      hasProviderError: $hasProviderError,\n\n      merchantInternalCustomerCode: $merchantInternalCustomerCode,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n\n      token: $token,\n\n      failed: $failed,\n      started: $started,\n      disputed: $disputed,\n      reverted: $reverted,\n      canceled: $canceled,\n      succeeded: $succeeded,\n\n      skip: $skip,\n      take: $take,\n\n      after: $after,\n      first: $first,\n\n      before: $before,\n      last: $last,\n\n      sorting: $sorting\n    ) {\n      edges {\n        node {\n          ...MerchantTransactionFragment\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiTransaction(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiTransaction(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiTransaction(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiTransaction(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MerchantApiClientTransactionNuveiPreSessionData($transactionProvider: TRANSACTION_PROVIDER, $merchantTransactionProviderId: String) {\n    merchantApiClientGetPreSessionData(transactionProvider: $transactionProvider, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ... on MerchantClientTransactionNuveiPreSessionData {\n        provider\n        merchantId\n        merchantSiteId\n        environment\n      }\n      ... on MerchantClientTransactionGenericPreSessionData {\n        provider\n        publicKey\n      }\n    }\n  }\n"): (typeof documents)["\n  query MerchantApiClientTransactionNuveiPreSessionData($transactionProvider: TRANSACTION_PROVIDER, $merchantTransactionProviderId: String) {\n    merchantApiClientGetPreSessionData(transactionProvider: $transactionProvider, merchantTransactionProviderId: $merchantTransactionProviderId) {\n      ... on MerchantClientTransactionNuveiPreSessionData {\n        provider\n        merchantId\n        merchantSiteId\n        environment\n      }\n      ... on MerchantClientTransactionGenericPreSessionData {\n        provider\n        publicKey\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MerchantApiClientTransactionPaymentSessionStart(\n    $merchantTransactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $data: MerchantApiClientTransactionPaymentStartSchema!\n  ) {\n    merchantApiClientTransactionPaymentSessionStart(\n      transactionProvider: $transactionProvider,\n      merchantTransactionProviderId: $merchantTransactionProviderId\n\n      data: $data,\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"): (typeof documents)["\n  mutation MerchantApiClientTransactionPaymentSessionStart(\n    $merchantTransactionProviderId: String,\n    $transactionProvider: TRANSACTION_PROVIDER,\n\n    $data: MerchantApiClientTransactionPaymentStartSchema!\n  ) {\n    merchantApiClientTransactionPaymentSessionStart(\n      transactionProvider: $transactionProvider,\n      merchantTransactionProviderId: $merchantTransactionProviderId\n\n      data: $data,\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MerchantApiClientTransactionPaymentSessionVerify(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiClientTransactionPaymentSessionVerify(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"): (typeof documents)["\n  mutation MerchantApiClientTransactionPaymentSessionVerify(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiClientTransactionPaymentSessionVerify(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MerchantApiTransactionVoid(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiTransactionVoid(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"): (typeof documents)["\n  mutation MerchantApiTransactionVoid(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String\n  ) {\n    merchantApiTransactionVoid(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MerchantApiTransactionRefund(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String,\n    $amount: BigInt!\n  ) {\n    merchantApiTransactionRefund(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      amount: $amount\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"): (typeof documents)["\n  mutation MerchantApiTransactionRefund(\n    $id: String,\n    $code: String,\n    $token: String,\n    $merchantInternalTransactionCode: String,\n    $amount: BigInt!\n  ) {\n    merchantApiTransactionRefund(\n      id: $id,\n      code: $code,\n      token: $token,\n      merchantInternalTransactionCode: $merchantInternalTransactionCode,\n      amount: $amount\n    ) {\n      ...MerchantTransactionFragment\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;